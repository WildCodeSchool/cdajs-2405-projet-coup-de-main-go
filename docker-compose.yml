services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.deploy
    healthcheck:
      test: 'curl --fail --silent --show-error http://localhost:4000/health || exit 1'
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      CI: true
      APOLLO_PORT: ${APOLLO_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - 4000:4000
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.deploy
    healthcheck:
      test: "curl --fail --request GET --url 'http://localhost:5173' || exit 1"
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      VITE_BACKEND_URL: ${VITE_BACKEND_URL}
      VITE_DOMAIN_BACKEND_URL: ${VITE_DOMAIN_BACKEND_URL}
      VITE_POLL_CHAT_INTERVAL: ${VITE_POLL_CHAT_INTERVAL}
    ports:
      - 5173:5173
    volumes:
      - ./frontend:/webapp
      - node_modules:/webapp/node_modules
    depends_on:
      backend:
        condition: service_healthy

  postgres:
    image: postgres:alpine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 20
    shm_size: 128mb
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

volumes:
  postgres-data:
  node_modules:
