name: jest-ci

on: pull_request

jobs:
  tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install curl
        run: sudo apt-get update && sudo apt-get install -y curl

      - name: Start services with Docker Compose
        run: |
          echo "Starting services with Docker Compose dev..."
          docker compose -f docker-compose.yml up --build
        env:
          DB_USER: ${{ secrets.POSTGRES_USER }}
          DB_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DB_HOST: ${{ secrets.POSTGRES_HOST }}
          DB_PORT: ${{ secrets.POSTGRES_PORT }}
          DB_DATABASE: ${{ secrets.POSTGRES_DB }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          VITE_BACKEND_URL: ${{ secrets.VITE_BACKEND_URL }}
          VITE_DOMAIN_BACKEND_URL: ${{ secrets.VITE_DOMAIN_BACKEND_URL }}

      - name: Verify frontend is running
        run: |
          echo "Verifying frontend is up..."
          for i in {1..10}; do
            http_response=$(curl --write-out "%{http_code}" --silent --output /dev/null http://localhost:5173)
            if [ "$http_response" -eq 200 ]; then
              echo "Frontend is running (status code: $http_response)"
              break
            else
              echo "Frontend not running yet (status code: $http_response)... retrying in 5s"
              sleep 5
            fi
          done

      - name: Check Backend Health
        run: |
          echo "Checking if backend is healthy..."
          for i in {1..10}; do
            http_response=$(curl --write-out "%{http_code}" --silent --output /dev/null http://localhost:4000/health)
            if [ "$http_response" -eq 200 ]; then
              echo "Backend is healthy (status code: $http_response)"
              break
            else
              echo "Backend not healthy yet (status code: $http_response)... retrying in 5s"
              sleep 5
            fi
          done

      - name: Move to backend directory
        run: cd backend

      - name: Run Database Seeds
        run: |
          echo "Starting seed..."
          npm run seed &
          echo "Waiting for 10 seconds to let the seed start..."
          sleep 10
        working-directory: backend
        env:
          DB_HOST: ${{ secrets.POSTGRES_HOST }}
          DB_USER: ${{ secrets.POSTGRES_USER }}
          DB_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DB_PORT: ${{ secrets.POSTGRES_PORT }}
          DB_DATABASE: ${{ secrets.POSTGRES_DB }}

      - name: Run the tests
        run: npm run test
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          VITE_FRONTEND_URL: ${{ secrets.VITE_FRONTEND_URL }}
          VITE_BACKEND_URL: ${{ secrets.VITE_BACKEND_URL }}
          VITE_DOMAIN_BACKEND_URL: ${{ secrets.VITE_DOMAIN_BACKEND_URL }}
